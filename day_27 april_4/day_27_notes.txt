Node.js Path Module
===================
-The Path module provides a way of working with directories and file paths.
sep	        Returns the segment separator specified for the platform
delimiter	Returns the delimiter specified for the platform
basename()	Returns the last part of a path
dirname()	Returns the directories of a path
extname()	Returns the file extension of a path
format()	Formats a path object into a path string
parse()	Formats a path string into a path object
isAbsolute()	Returns true if a path is an absolute path, otherwise false
join()	Joins the specified paths into one
normalize()	normalizes the given path, resolving '..' and '.' segments.
relative()	Returns the relative path from one specified path to another specified path
resolve()	Resolves the specified paths into an absolute path
win32	Returns an object containing Windows specific properties and methods
posix	Returns an object containing POSIX specific properties and methods


Q. why youâ€™d use the path.join() function instead of using string concatenation??
ans: 1. Supports separators (\ or /) for different OS.
	 2. handles leading and trailing slashes.
	    path.join('data', 'test.txt'); // 'data/test.txt'
		path.join('data', '/test.txt'); // 'data/test.txt'
		path.join('data/', 'test.txt'); // 'data/test.txt'
		path.join('data/', '/test.txt'); // 'data/test.txt'


join() vs resolve()
===================
-join() concatenates(joins) the path segments.
-resolve() creates an absolute path from the root. 

-Both methods will normalize the paths i.e. they treat .. as we normally use them when navigating in the folder structure.

-join() concatenates the the path fragments.
-resolve() looks for the first segment with / from the right and append everything up to this point to the root.

https://www.scaler.com/topics/nodejs/path-module-in-node-js/





Process Module
==============
-Process Module provides the env property which hosts all the environment variables that were set at the moment the process was started.
Note: process does not need a "require", it's automatically available.
-If you have multiple environment variables in your node project, create an .env file in the root directory of project, and then use the dotenv package to load them during runtime.
.env file
	USER_ID="239482"
	USER_KEY="abcd"
	NODE_ENV="development"
	PORT=1234
-npm install dotenv
 require('dotenv').config();
	process.env.USER_ID; // "239482"
	process.env.USER_KEY; // "abcd"
	process.env.NODE_ENV; // "development"
-How to find which version of V8 ships with a particular version of Node.js?
	node -p process.versions.v8
-process.nextTick() : invoke this function at the end of the current operation, before the  next event loop tick starts
-This function defers the execution of a callback function until the next Event Loop Iteration.
-Every time the event loop takes a full trip, we call it a tick.
-setTimeout(() => {}, 0) will execute the function at the end of next tick, much later than when using nextTick() which prioritizes the call and executes it just before the beginning of the next tick


Child Processes Module
======================
-Node.js is single-threaded, non-blocking but running a single thread in a CPU cannot handle increasing workload.
-The child_process module can be used to start child processes, and those child processes can easily communicate with each other with a messaging system.
-There are four different ways to create a child process in Node:
	1. exec() 
	2. execFile()
	3. spawn()
	4. fork()
exec() : creates a new shell process and executes a command in that shell.
         The output of the command can be collected via a callback function passed to exec()
		ex: exec("dir", (error, stdout, stderr) =>{});
		error - if command not found
		stdout - output of the executed command
		stderr - if error while executing the command
			
execFile() : execute a file (bat/sh)
			 
spawn(): when the command we want to run can output a large amount of data

fork() : communication channel is established to the child process when using fork, so we 	can use the send function on the forked process along with the global process object itself to exchange messages between the parent and forked processes.